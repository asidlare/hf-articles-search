"""Add article tables

Revision ID: aaf8f45c98b3
Revises: 
Create Date: 2025-06-18 18:43:16.774607

"""
from typing import Sequence, Union
from pgvector.sqlalchemy.vector import VECTOR
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aaf8f45c98b3'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    op.create_table('articles',
    sa.Column('article_id', sa.BIGINT(), nullable=False),
    sa.Column('link_hash', sa.CHAR(length=16), nullable=False),
    sa.Column('link', sa.VARCHAR(length=255), nullable=False),
    sa.Column('headline', sa.VARCHAR(length=255), nullable=False),
    sa.Column('date', sa.DATE(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('article_id'),
    sa.UniqueConstraint('link'),
    sa.UniqueConstraint('link_hash')
    )
    op.create_table('tags',
    sa.Column('tag_id', sa.BIGINT(), nullable=False),
    sa.Column('tag', sa.VARCHAR(length=255), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('tag_id'),
    sa.UniqueConstraint('tag')
    )
    op.create_table('article_tags',
    sa.Column('article_id', sa.BIGINT(), nullable=False),
    sa.Column('tag_id', sa.BIGINT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['articles.article_id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ),
    sa.PrimaryKeyConstraint('article_id', 'tag_id')
    )
    op.create_table('embeddings',
    sa.Column('embedding_id', sa.BIGINT(), nullable=False),
    sa.Column('summarization', sa.VARCHAR(length=1000), nullable=False),
    sa.Column('article_id', sa.BIGINT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('embedding', VECTOR(dim=1536), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['articles.article_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('embedding_id')
    )
    op.create_index(op.f('ix_embeddings_article_id'), 'embeddings', ['article_id'], unique=False)
    op.create_table('key_insights',
    sa.Column('key_insight_id', sa.BIGINT(), nullable=False),
    sa.Column('key_insight', sa.VARCHAR(length=255), nullable=False),
    sa.Column('article_id', sa.BIGINT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['articles.article_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('key_insight_id'),
    sa.UniqueConstraint('key_insight', 'article_id')
    )
    op.create_index(op.f('ix_key_insights_article_id'), 'key_insights', ['article_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_key_insights_article_id'), table_name='key_insights')
    op.drop_table('key_insights')
    op.drop_index(op.f('ix_embeddings_article_id'), table_name='embeddings')
    op.drop_table('embeddings')
    op.drop_table('article_tags')
    op.drop_table('tags')
    op.drop_table('articles')
    op.execute('DROP EXTENSION IF EXISTS vector')
    # ### end Alembic commands ###
